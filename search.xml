<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue.js学习笔记]]></title>
    <url>%2F2018%2F03%2F25%2FVue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[关于“渐进式”的理解想要理解渐进式的概念，首先要理解什么是框架。框架的存在是为了帮助我们应对复杂度，而框架本身也会带来一定的复杂度，所以就可以抽象出一个问题，即所要解决的问题的内在复杂度，与所使用的工具的复杂度进行对比。不难理解，工具复杂度是为了处理内在复杂度所做的投资，所以如果使用一个过于简陋的工具应对一个复杂的问题，就会遇到工具太弱而使得生产力受影响的问题；同样的，如果你想要解决的问题并不复杂，但你却用了很复杂的框架，那么就会遇到工具复杂度所带来的副作用，这样不仅会使工具失去了本身所带来的优势，还会增加各种问题，例如培训成本、上手成本、以及实际开发效率等。 综上所诉，做得少的框架可以给你更多的灵活性，但你需要做更多的选择；做得多的框架有更强的侵入性，学习成本更高，灵活性更低。而我们目前需要的可能是一个能够根据项目需要自由“伸缩”的框架，这种自由“伸缩”的概念，就是渐进式的概念，渐进式的框架不需要做太多职责之外的事情，你完全可以根据你的需要来选择让框架完成什么功能。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基础学习笔记]]></title>
    <url>%2F2018%2F03%2F22%2FMarkDown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文源于Markdown官方文档，自行整理后发布，首发于CSDN，Markdown常用语法学习笔记 标题（1）atx形式： # 表示一级标题，即HTML语言中的&lt;h1&gt;&lt;/h1&gt;标签 ## 表示二级标题，即HTML语言中的&lt;h2&gt;&lt;/h2&gt;标签 …… ######表示六级标题，即HTML语言中的&lt;h6&gt;&lt;/h6&gt;标签 （2）Setext形式： = 底线 表示最高阶标题，即HTML语言中的&lt;h1&gt;&lt;/h1&gt;标签 - 底线 表示二阶标题，即HTML语言中的&lt;h2&gt;&lt;/h2&gt;标签 段落一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，例如只有空白和tab）。 注意，一个以上空行的意思是，当前行输入完毕换行后，再次按下回车键换行，这样即为一个以上空行。显示上看起来是两行文字之间留出一行了空白行。 段落即为HTML语言中的&lt;p&gt;&lt;/p&gt; 区块&gt; 表示区块，即首行缩进一个单位长度（通常为四个空格的长度），即HTML语言中的&lt;blockquote&gt;&lt;/blockquote&gt; 列表* 无序列表，对应HTML语言中的&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt; + 无序列表，对应HTML语言中的&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt; - 无序列表，对应HTML语言中的&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt; 1. 有序列表，数字加英文句点，对应HTML语言中的&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 注意： 你在列表标记上使用的数字并不会影响HTML的输出结果。如果你使用懒惰的写法，建议第一个项目最好从1.开始，因为Markdown未来有可能会支持有序列表的start属性。 如果在插入列表时，在列表的两项之中插入了空行，则该项内容会用&lt;p&gt;标签包裹起来，你也可以在一项中插入多个段落，只要正确的保证了空行，并且最好开头能够空出四个空格或一个tab，或者是添加一个&gt;使它变成区块，这样和列表显示起来比较整齐。 链接Markdown支持两种形式的链接语法：行内和参考两种形式。 （1）行内形式： 格式：This is an [example link](www.example.com) 解释：在HTML语言中即为，将example link包裹在&lt;a&gt;标签中，并且href地址为www.example.com。 格式：This is an [example link](www.example.com &quot;With a title&quot;) 解释：基本同上，区别是指定了该a标签的title属性值为With a title。 （2）参考形式： 参考形式的链接可以让你为链接定一个名称，之后在其他地方统一定义链接的内容。 格式：This is an [example link][1], and [the second example link][2]. [1]: www.example.com [2]: www.example2.com &quot;title&quot; 解释基本同上，需要注意的地方是，[1]不一定非要使用数字，可以使用字母、数字和空格或其组合，但是不分大小写。 图片图片的语法和链接很像，也分为行内形式和参考形式两种。 （1）行内形式（title是选择性的）： 1![alt text](/path/to/image.jpg &quot;Title&quot;) （2）参考形式：123![alt text][id][id]: /path/to/image.jpg &quot;Title&quot; 上面两种形式都会输出HTML为：&lt;img src=&quot;path/to/image.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot;&gt; 代码Markdown文档中如果输入HTML代码，是会直接生效的。如果想要显示出一一段代码来而不是让它被解析运行，就使用` `（反引号，英文模式下按键盘左上角的波浪号键，注意不能跨行）将代码部分包裹起来，这样就可以显示出原原本本的代码了。 分割线可以在一行中使用三个以上的星号、减号、底线来建立一个分割线，行内不能有其他东西。也可以在星号或减号中间插入空格。如： * * * - - - ****** ------ 强调使用星号*和底线_作为标记强调字符的符号，被一个*或_包围的内容会以标签的形式显示，即斜体。被两个*或_包围的内容将会以标签的形式显示，即加粗。 注意，如果*或_的两边有空白，则会显示成普通的星号或底线。如果想要在文字前后直接插入普通的星号或底线，则需要用到转义字符\。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F22%2FHello-World%2F</url>
    <content type="text"><![CDATA[Update in 2018.03.25更新了搜索功能，博客基本功能全部配置完毕。绑定了域名fnine59.top，以后可以通过fnine59.top或www.fnine59.top访问本站。 Update in 2018.03.22程序员面对任何一门新技术，第一句话似乎永远都是Hello World。 从大约3月18号左右开始着手准备这个项目，Hexo基于Git和Nodejs，所以先是花了一两天左右，利用课余时间学习了Git。到最后真正用于搭建这个网站的时间差不多也就一个下午。 这个网站目前还有些功能没有完善起来，会进一步改善的。 欢迎留言，欢迎联系我❤]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>Others</tag>
      </tags>
  </entry>
</search>

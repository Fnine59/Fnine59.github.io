<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript笔记整理]]></title>
    <url>%2F2018%2F03%2F29%2FJavaScript%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[前端技巧整理]]></title>
    <url>%2F2018%2F03%2F29%2F%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[关于Node.js Node.js适合高并发、低负载、弱逻辑的项目，适合做如dataAPI或聊天系统等实时性要求比较高的项目。 关于HTML 渲染顺序 HTML文档是从上向下渲染的，因此同一区块有些不重要的内容可以适当往后放，让重要内容先被加载出来（本条是对于结构来讲，也就是对于HTML语言来讲，不涉及表现CSS或行为JS）。 结构与表现分离 前端开发时要注意结构与表现分离，在编写前端页面的过程中，要先从结构考虑，争取做到结构最简，避免有过多不必要的div。当结构编写完后，再考虑表现，也就是CSS样式。通过这种结构与表现分离的思想，争取做到修改业务逻辑时，只需要改动样式，而不需要改动结构。 如何让一段文本向右移动？ 当然可以采取margin或padding的形式将文字元素推到右边，但这样做会造成外部容器的宽度发生变化，就需要再次修改外部容器的宽度。此时，最理想的操作方法应该是使用text-indent属性，来设置文本缩进，它不会影响外部容器的宽度，也可以设置百分比，简洁易用。 背景图片 元素的背景，比如导航栏圆角背景，可以将普通状态下的背景（如灰色）与hover状态下的背景（如橙色）做在同一张图上，上下排列并掌握好宽和高。这样可以给默认状态下的导航栏菜单项（即display属性值为block的a标签）设置这张背景图，通过长宽来确保背景为灰色。当该菜单项处于hover状态或选中状态时，添加class并设置该菜单项的background-position属性，来使背景图向上移动，显示出之前拼接好的橙色背景来。 导航栏的制作 导航栏的结构均为&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;这样的无序列表，如果是竖向导航栏则无需float，如果是横向导航栏则可以设置li标签的float属性的值为left或right。 js代码中的window.onload 是为了让dom加载完毕之后再执行以下代码。jquery的$(function)(){}相当于js中的window.onload，并且比window.onload性能要好。 关于语义 &lt;q&gt;&lt;/q&gt;标签会在html文档中显示为双引号，但使用标签的主要目的并不是为了显示双引号，这样还不如直接输入双引号。它的目的是它的语义：引用别人的话。还有一个引用标签&lt;blockquote&gt;&lt;/blockquote&gt;，浏览器对它的解释是缩进样式，表示引入长文本。 一些HTML标签 &lt;hr /&gt;标签用于添加一条水平横线。 &lt;em&gt;&lt;/em&gt;标签用于斜体。 &lt;address&gt;&lt;/address&gt;用于显示地址，浏览器默认样式是斜体，当然也可用通过css来修改。 插入代码使用&lt;code&gt;标签如：&lt;code&gt;代码语言&lt;/code&gt; &lt;pre&gt;&lt;/pre&gt;标签的主要作用:预格式化的文本。被包围在 pre 元素中的文本通常会保留空格和换行符。可以使用这个标签来包裹大段代码。 可以对&lt;table&gt;标签进行一些优化，&lt;caption&gt;表格标题&lt;/caption&gt;可以指定表格的标题，&lt;table summary=&quot;表格简介文本&quot;&gt;，这里的简介不会在浏览器显示出来，是为了增加表格的可读性（语义化）。 &lt;a&gt;除了常见的功能之外，标签还有一个功能是可以用来链接Email地址，使用mailto可以使访问者便捷的向网站管理者发送电子邮件，这样点击a链接时会打开电子邮件应用，并自动填写收件人等设置好的信息。具体用法如图 img标签可以通过title属性指定鼠标滑过图片时显示的文本。图片格式可以是gif，png，jpg，jpeg等。 在&lt;select&gt;标签中设置multiple=”multiple”属性，就可以实现多选功能，在 windows 操作系统下，进行多选时按下Ctrl键同时进行单击（在 Mac下使用 Command +单击），可以选择多个选项。 表单的重置按钮，可以通过设置input标签的type值为reset来实现。 label标签：label标签不会向用户呈现任何特殊效果，它的作用是为鼠标用户改进了可用性。如果你在 label 标签内点击文本，就会触发此控件。就是说，当用户单击选中该label标签时，浏览器就会自动将焦点转到和标签相关的表单控件上（就自动选中和该label标签相关连的表单控件上）。语法：&lt;label for=&quot;控件id名称&quot;&gt;。例子： 123456789&lt;form&gt; &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot; /&gt; &lt;br /&gt; &lt;label for=&quot;female&quot;&gt;女&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;female&quot; /&gt; &lt;label for=&quot;email&quot;&gt;输入你的邮箱地址&lt;/label&gt; &lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter email&quot;&gt;&lt;/form&gt; css几种设置方法的优先级 12345671. 内联样式表的权值最高 10002. ID 选择器的权值为 1003. Class 类选择器的权值为 104. HTML 标签选择器的权值为 1 CSS 优先级法则： 123456789A 选择器都有一个权值，权值越大越优先B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置C 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式D 继承的CSS 样式不如后来指定的CSS 样式E 在同一组属性设置中标有“!important”规则的优先级最大 ID选择器只能在文档中使用一次。可以使用类选择器词列表方法为一个元素同时设置多个样式，ID选择器是不可以的。 子选择器，即大于符号(&gt;),用于选择指定标签元素的第一代子元素。包含选择器，即加入空格,用于选择指定标签元素下的后辈元素。二者的区别在于：&gt;作用于元素的第一代后代，空格作用于元素的所有后代。 通配选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素。 当你想为html中多个标签元素设置同一个样式时，可以使用分组选择符（,）。 有些特殊的情况需要为某些样式设置具有最高权值，这时候我们可以使用!important来解决。如：p{color:red!important;}。注意：!important要写在分号的前面。 text-decoration可以用于设下划线、删除线等文字样式。 中文文字中的段前习惯空两个文字的空白，这个特殊的样式可以用下面代码来实现：p{text-indent:2em;}。注意：2em的意思就是文字的2倍大小。em 就是一个全角占位符，则2em 就是2个全角位置。但是，建议不要使用em作为中文站点的文字单位，会导致文字变形十分严重的。 line-height也是段落排版中一个常用的属性，指定行间距（行高）。 如果想在网页排版中设置文字间隔或者字母间隔就可以使用letter-spacing 来实现。如果想设置英文单词之间的间距可以使用 word-spacing 来实现。 html的标签元素大体被分为三种不同类型：块状元素、内联元素(又叫行内元素)和内联块状元素。它们的区别：块状元素都自带换行效果；内联元素都是定义行内小区域且不换行，但如果没有内容就没有意义，不占空间；内联块状元素除了不换行，即使没有内容也会占空间。 块级元素特点：（display:block; 所有块级元素都具备盒子模型的特征） 每个块级元素都从新的一行开始，并且其后的元素也另起一行。 元素的高度、宽度、行高以及顶和底边距都可设置。 元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。 内联元素特点：（display:inline;） 和其他元素都在一行上； 元素的高度、宽度及顶部和底部边距不可设置； 元素的宽度就是它包含的文字或图片的宽度，不可改变。 内联块状元素特点：（inline-block;） 和其他元素都在一行上； 元素的高度、宽度、行高以及顶和底边距都可设置。 元素有三种布局模型： 流动模型（Flow） 浮动模型 (Float) 层模型（Layer） 流动模型 流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML 网页元素都是根据流动模型来分布网页内容的。 流动布局模型比较典型的特征：第一点，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。如右侧代码编辑器中三个块状元素标签(div，h1，p)宽度显示为100%。第二点：在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。 浮动模型 层模型有三种形式： 绝对定位(position: absolute) 相对定位(position: relative) 固定定位(position: fixed) absolute表里如一，移动了就是移动了。relative只是表面显示移动了，但实际还在文档流中原有位置，别的元素无法占据。 水平居中：如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。当被设置元素为 块状元素 时用 text-align：center 就不起作用了，这时也分两种情况：定宽块状元素(块状元素的宽度width为固定值)和不定宽块状元素(块状元素的宽度width不固定)。满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的，元素的“上下 margin” 是可以随意设置的。不定宽度的块状元素有三种方法居中（这三种方法目前使用的都很多）： 加入 table 标签。这是利用table标签的长度自适应性——即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。 设置 display: inline 方法：与第一种类似，显示类型设为 行内元素，进行不定宽元素的属性设置。 设置 position:relative 和 left:50%：利用 相对定位 的方式，将元素向左偏移 50% ，即达到居中的目的。 垂直居中 父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。line-height 与 font-size 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部。但这种文字行高与块高一致带来了一个弊端：当文字内容的长度大于块的宽时，就有内容脱离了块。 父元素高度确定的多行文本、图片等的竖直居中的方法有两种：方法一：css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。使用插入 table (包括tbody、tr、td)标签，同时设置 vertical-align：middle。方法二：在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。 隐性改变display类型：只要html代码中出现position : absolute或float:left或float:right其中之一，则元素的display显示类型就会自动变为inline-block，就可以设置宽和高了，并且默认宽度不占满父元素。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js学习笔记]]></title>
    <url>%2F2018%2F03%2F25%2FVue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[关于“渐进式”的理解想要理解渐进式的概念，首先要理解什么是框架。框架的存在是为了帮助我们应对复杂度，而框架本身也会带来一定的复杂度，所以就可以抽象出一个问题，即所要解决的问题的内在复杂度，与所使用的工具的复杂度进行对比。不难理解，工具复杂度是为了处理内在复杂度所做的投资，所以如果使用一个过于简陋的工具应对一个复杂的问题，就会遇到工具太弱而使得生产力受影响的问题；同样的，如果你想要解决的问题并不复杂，但你却用了很复杂的框架，那么就会遇到工具复杂度所带来的副作用，这样不仅会使工具失去了本身所带来的优势，还会增加各种问题，例如培训成本、上手成本、以及实际开发效率等。 综上所诉，做得少的框架可以给你更多的灵活性，但你需要做更多的选择；做得多的框架有更强的侵入性，学习成本更高，灵活性更低。而我们目前需要的可能是一个能够根据项目需要自由“伸缩”的框架，这种自由“伸缩”的概念，就是渐进式的概念，渐进式的框架不需要做太多职责之外的事情，你完全可以根据你的需要来选择让框架完成什么功能。 Vue.js的安装兼容性：Vue不支持IE8及以下版本，因为Vue使用了IE8无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。 Vue Devtools：推荐在浏览器上安装Vue Devtools，它提供了一个更为友好的界面来审查和调试Vue应用。Vue Devtools可以直接从chrome商店下载安装，但是需要翻墙；也可以手动安装，步骤如下： 找到vue-devtools#vue-devtools的github项目，并将其clone到本地.vue-devtoolsgit clone https://github.com/vuejs/vue-devtools.git 安装项目所需要的npm包npm install 编译项目文件npm run build 添加至chrome浏览器 安装Vue直接下载Vue并用&lt;script&gt;标签引入，Vue会被注册为一个全局变量。 CDN推荐链接到一个你可以手动更新的指定版本号：&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt; 使用时建议将vue.js更换为vue.min.js从而缩小项目构建。 命令行工具（CLI）Vue提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：1234567#全局安装 vue-cli$ npm install --global vue-cli# 创建一个基于 webpack 模板的新项目$ vue init webpack my-project# 安装依赖$ cd my-project$ npm run dev CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读指南，在熟悉 Vue 本身之后再使用 CLI。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基础学习笔记]]></title>
    <url>%2F2018%2F03%2F22%2FMarkDown%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文源于Markdown官方文档，自行整理后发布，首发于CSDN，Markdown常用语法学习笔记 标题（1）atx形式： # 表示一级标题，即HTML语言中的&lt;h1&gt;&lt;/h1&gt;标签 ## 表示二级标题，即HTML语言中的&lt;h2&gt;&lt;/h2&gt;标签 …… ######表示六级标题，即HTML语言中的&lt;h6&gt;&lt;/h6&gt;标签 （2）Setext形式： = 底线 表示最高阶标题，即HTML语言中的&lt;h1&gt;&lt;/h1&gt;标签 - 底线 表示二阶标题，即HTML语言中的&lt;h2&gt;&lt;/h2&gt;标签 段落一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，例如只有空白和tab）。 注意，一个以上空行的意思是，当前行输入完毕换行后，再次按下回车键换行，这样即为一个以上空行。显示上看起来是两行文字之间留出一行了空白行。 段落即为HTML语言中的&lt;p&gt;&lt;/p&gt; 区块&gt; 表示区块，即首行缩进一个单位长度（通常为四个空格的长度），即HTML语言中的&lt;blockquote&gt;&lt;/blockquote&gt; 列表* 无序列表，对应HTML语言中的&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt; + 无序列表，对应HTML语言中的&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt; - 无序列表，对应HTML语言中的&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;ul&gt; 1. 有序列表，数字加英文句点，对应HTML语言中的&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 注意： 你在列表标记上使用的数字并不会影响HTML的输出结果。如果你使用懒惰的写法，建议第一个项目最好从1.开始，因为Markdown未来有可能会支持有序列表的start属性。 如果在插入列表时，在列表的两项之中插入了空行，则该项内容会用&lt;p&gt;标签包裹起来，你也可以在一项中插入多个段落，只要正确的保证了空行，并且最好开头能够空出四个空格或一个tab，或者是添加一个&gt;使它变成区块，这样和列表显示起来比较整齐。 链接Markdown支持两种形式的链接语法：行内和参考两种形式。 （1）行内形式： 格式：This is an [example link](www.example.com) 解释：在HTML语言中即为，将example link包裹在&lt;a&gt;标签中，并且href地址为www.example.com。 格式：This is an [example link](www.example.com &quot;With a title&quot;) 解释：基本同上，区别是指定了该a标签的title属性值为With a title。 （2）参考形式： 参考形式的链接可以让你为链接定一个名称，之后在其他地方统一定义链接的内容。 格式：This is an [example link][1], and [the second example link][2]. [1]: www.example.com [2]: www.example2.com &quot;title&quot; 解释基本同上，需要注意的地方是，[1]不一定非要使用数字，可以使用字母、数字和空格或其组合，但是不分大小写。 图片图片的语法和链接很像，也分为行内形式和参考形式两种。 （1）行内形式（title是选择性的）： 1![alt text](/path/to/image.jpg &quot;Title&quot;) （2）参考形式：123![alt text][id][id]: /path/to/image.jpg &quot;Title&quot; 上面两种形式都会输出HTML为：&lt;img src=&quot;path/to/image.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot;&gt; 代码Markdown文档中如果输入HTML代码，是会直接生效的。如果想要显示出一一段代码来而不是让它被解析运行，就使用` `（反引号，英文模式下按键盘左上角的波浪号键，注意不能跨行）将代码部分包裹起来，这样就可以显示出原原本本的代码了。 分割线可以在一行中使用三个以上的星号、减号、底线来建立一个分割线，行内不能有其他东西。也可以在星号或减号中间插入空格。如： * * * - - - ****** ------ 强调使用星号*和底线_作为标记强调字符的符号，被一个*或_包围的内容会以标签的形式显示，即斜体。被两个*或_包围的内容将会以标签的形式显示，即加粗。 注意，如果*或_的两边有空白，则会显示成普通的星号或底线。如果想要在文字前后直接插入普通的星号或底线，则需要用到转义字符\。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F22%2FHello-World%2F</url>
    <content type="text"><![CDATA[Update in 2018.03.25更新了搜索功能，博客基本功能全部配置完毕。绑定了域名fnine59.top，以后可以通过fnine59.top或www.fnine59.top访问本站。 Update in 2018.03.22程序员面对任何一门新技术，第一句话似乎永远都是Hello World。 从大约3月18号左右开始着手准备这个项目，Hexo基于Git和Nodejs，所以先是花了一两天左右，利用课余时间学习了Git。到最后真正用于搭建这个网站的时间差不多也就一个下午。 这个网站目前还有些功能没有完善起来，会进一步改善的。 欢迎留言，欢迎联系我❤]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>Others</tag>
      </tags>
  </entry>
</search>
